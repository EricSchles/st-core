package main

import (
	"encoding/json"
	"io/ioutil"
	"log"
	"net/http"
	"sync"

	"github.com/gorilla/mux"
	"github.com/thejerf/suture"
)

// MOCK TYPES

type Block struct {
	q      chan bool
	token  suture.ServiceToken
	id     int
	name   string
	parent *Group
}

func (b *Block) Serve() {
	<-b.q
}

func (b *Block) Stop() {
	b.q <- true
}

type BlockDesc struct {
	Name string
}

func (b *Block) UnmarshalJSON(msg []byte) error {
	var m BlockDesc
	err := json.Unmarshal(msg, &m)
	if err != nil {
		return err
	}
	b.name = m.Name
	return nil
}

func NewBlock(id int, parent *Group) *Block {
	q := make(chan bool)
	b := &Block{
		id:     id,
		q:      q,
		parent: parent,
	}
	parent.AddBlock(b)
	return b
}

type Group struct {
	parent   *Group
	children []*Group
	members  []*Block
	id       int
	sync.Mutex
}

type GroupMsg struct {
	ParentID    int
	ChildrenIDs []int
	MemberIDs   []int
	ID          int
}

func (g *Group) MarshalJSON() ([]byte, error) {
	var m GroupMsg
	if g.parent != nil {
		m.ParentID = g.parent.id
	} else {
		m.ParentID = 0
	}
	m.ID = g.id
	MemberIDs := make([]int, len(g.members))
	for i, m := range g.members {
		MemberIDs[i] = m.id
	}
	m.MemberIDs = MemberIDs
	ChildrenIDs := make([]int, len(g.children))
	for i, c := range g.children {
		ChildrenIDs[i] = c.id
	}
	m.ChildrenIDs = ChildrenIDs
	return json.Marshal(m)
}

func NewGroup(id int, blocks []*Block, children []*Group, parent *Group) *Group {
	return &Group{
		children: children,
		members:  blocks,
		parent:   parent,
		id:       id,
	}
}

func (g *Group) AddBlock(b *Block) {
	g.Lock()
	defer g.Unlock()
	g.members = append(g.members, b)
}

type Server struct {
	blocks     map[int]*Block
	groups     map[int]*Group
	supervisor *suture.Supervisor
	nextID     int
	sync.Mutex
}

func NewServer() *Server {
	supervisor := suture.NewSimple("st-core")
	supervisor.ServeBackground()
	blocks := make(map[int]*Block)
	groups := make(map[int]*Group)
	groups[0] = NewGroup(0, nil, nil, nil) // this is the top level group
	return &Server{
		blocks:     blocks,
		supervisor: supervisor,
		nextID:     0, // MostRecentID, LastID or something...
		groups:     groups,
	}
}

func (s *Server) GetNextID() int {
	s.nextID += 1
	return s.nextID
}

// HANDLERS

func (s *Server) createBlockHandler(w http.ResponseWriter, r *http.Request) {
	b := NewBlock(s.GetNextID(), s.groups[0]) // all blocks start in the top level group

	body, err := ioutil.ReadAll(r.Body)
	if err != nil {
		log.Panic(err)
	}
	err = json.Unmarshal(body, &b)
	if err != nil {
		log.Panic(err)
	}

	log.Println("adding", b.name, "to pattern with id", b.id)
	b.token = s.supervisor.Add(b)

	s.Lock()
	s.blocks[b.id] = b
	s.Unlock()

	w.WriteHeader(200)
	w.Write([]byte("OK"))

}

func (s *Server) createGroupHandler(w http.ResponseWriter, r *http.Request) {

	var groupids GroupMsg

	body, err := ioutil.ReadAll(r.Body)
	if err != nil {
		log.Panic(err)
	}
	err = json.Unmarshal(body, &groupids)
	if err != nil {
		log.Panic(err)
	}
	// get the blocks in this group
	blocks := make([]*Block, len(groupids.MemberIDs))
	for i, id := range groupids.MemberIDs {
		blocks[i] = s.blocks[id]
	}
	// get the other groups
	groups := make([]*Group, len(groupids.ChildrenIDs))
	for i, id := range groupids.ChildrenIDs {
		groups[i] = s.groups[id]
	}

	// all blocks in this selection should have the same parent so let's just
	// sanity check that first. Probably don't need this
	parents := make(map[*Group]bool)
	for _, b := range blocks {
		parents[b.parent] = true
	}
	if len(parents) > 1 {
		log.Panic("blocks have multiple parents")
	}
	//
	parent := blocks[0].parent

	// this parent becomes the parent of this group
	g := NewGroup(s.GetNextID(), blocks, groups, parent)
	log.Println("Making new group with id", g.id)

	for i, _ := range blocks {


	// and this group becomes the parent of all the blocks
	for i, _ := range blocks {
		blocks[i].parent = g
	}

	// we need to remove the blocks in this group from its parent's group
	for i, _ := range blocks {
		blocks[i].parent = g
	}

	s.Lock()
	s.groups[g.id] = g
	s.Unlock()

	w.WriteHeader(200)
	w.Write([]byte("OK"))

}

func (s *Server) rootHandler(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(200)
	out, err := json.Marshal(s.groups[0])
	if err != nil {
		log.Panic(err)
	}
	w.Write(out)
}

func main() {
	s := NewServer()
	r := mux.NewRouter()
	r.HandleFunc("/", s.rootHandler).Methods("GET")
	r.HandleFunc("/group", s.createGroupHandler).Methods("POST")
	r.HandleFunc("/block", s.createBlockHandler).Methods("POST")
	http.Handle("/", r)

	log.Println("serving on 7071")
	err := http.ListenAndServe(":7071", nil)
	if err != nil {
		log.Panicf(err.Error())
	}
}
